// Code generated by go-bindata.
// sources:
// wski18n/resources/de_DE.all.json
// wski18n/resources/en_US.all.json
// wski18n/resources/es_ES.all.json
// wski18n/resources/fr_FR.all.json
// wski18n/resources/it_IT.all.json
// wski18n/resources/ja_JA.all.json
// wski18n/resources/ko_KR.all.json
// wski18n/resources/pt_BR.all.json
// wski18n/resources/zh_Hans.all.json
// wski18n/resources/zh_Hant.all.json
// DO NOT EDIT!

package wski18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wski18nResourcesDe_deAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesDe_deAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesDe_deAllJson,
		"wski18n/resources/de_DE.all.json",
	)
}

func wski18nResourcesDe_deAllJson() (*asset, error) {
	bytes, err := wski18nResourcesDe_deAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/de_DE.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEn_usAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5d\xdd\x6f\x1b\x39\x92\x7f\xcf\x5f\x51\xc8\x8b\x13\xc0\xf6\xec\xe2\x80\x3b\x5c\x06\xfb\xe0\x8d\x3d\x1b\x6f\x12\x3b\x88\x9c\xd9\x1d\x5c\x0e\x23\xba\xbb\x24\x71\xdc\x22\x7b\x48\xb6\x1d\xc5\xf0\xff\x7e\x20\xd9\x1f\xfa\xe0\x67\x4b\x9e\xc1\xbd\x25\xee\xaa\x5f\x15\x8b\x5f\x55\xc5\x22\xf5\x3f\x2f\x00\x1e\x5f\x00\x00\xbc\xa4\xe5\xcb\x37\xf0\xf2\xac\xae\x2b\x5a\x10\x45\x39\x03\xfc\x46\x15\x96\xd0\x30\xfc\x56\x63\xa1\xb0\xac\x56\x2f\x8f\x2d\xb1\x12\x84\xc9\xca\x90\xa5\x70\xbd\x00\x78\x3a\xde\x16\xf5\xb9\x61\x70\xf4\xf8\x78\x7a\x45\x96\xf8\xf4\x04\x27\x27\x0b\xac\xea\x23\x98\x71\x01\x8d\x24\x73\x3c\xfd\xca\x3c\xe2\x52\x38\x9d\x22\x51\x08\x2e\xde\x80\x07\xb6\xfb\xea\x64\x65\x5c\x81\x44\xe5\x61\xed\xbe\x3a\x59\xaf\x6b\x64\xff\x5a\x50\x79\x07\x45\xc5\x9b\x12\x0a\xbe\xac\x1b\x45\xd9\x5c\xff\x6b\x49\x58\x09\x15\x65\x08\x94\x29\x14\x33\x52\xe0\xa9\x47\x48\x3e\x8e\x53\x9d\x7b\x14\xb7\x5c\x22\xf0\x46\xd5\x8d\xaf\x41\x5b\x44\x4e\xa0\x12\x6f\x9b\x39\x54\x78\x8f\x55\x18\xcc\x41\xe8\x04\x24\x8d\x5a\x70\x41\xbf\xdb\x81\x34\x7d\x7f\xf1\xcb\xd4\x83\xe8\xa2\x74\x42\x3e\x18\x7b\x9d\x7d\xba\x84\xe9\xbb\xeb\xc9\x8d\x0f\x6f\x87\x2c\x06\xf6\xf3\xc5\xe7\xc9\xe5\xf5\x55\x02\x5e\x4f\xe9\x84\xbc\x5d\xd5\x44\x4a\x28\x50\x28\x3a\xd3\x53\x08\xa1\x58\x60\x71\x47\xd9\xdc\x03\x1d\xe2\x08\x0d\xfa\x9b\x05\x42\xc1\xd9\x8c\xce\x1b\x81\xa5\xd1\x6d\xc1\xa5\x82\x5a\xf0\x1a\x85\x5a\xc1\x3d\xa9\x1a\x34\xf3\x8a\xd4\x54\x7f\x7a\x7a\x3a\x02\x2a\x81\xb2\x7b\x52\xd1\x12\xde\xc0\xe3\xe3\x29\x0a\xf1\xf4\x14\x9e\x3f\x87\x14\xe4\x6c\xd0\x17\x46\x6e\x2b\x04\xc5\x81\x32\xaa\x28\xa9\xe8\x77\x04\x89\xe2\x1e\x85\x16\xcc\xb0\xd0\x1a\x45\xd5\xcd\x86\x71\x2a\xf3\x89\x08\xb2\x44\x85\x02\x88\x98\x37\x4b\x64\x4a\xc2\xb2\x91\x0a\x6e\x11\x08\xdc\x61\xd7\xdc\x9a\x50\x61\xb0\x88\x98\x4b\xaf\x4e\x63\xd1\x9c\xaa\x9d\x31\xc6\x95\x9d\x21\x87\xd0\x6d\x34\x9c\x53\xb9\x9f\x08\xad\xb0\xd4\xd6\xaf\x89\x90\x38\x40\x46\xfb\x2d\x85\xd3\x3d\x7d\xb9\xb8\x83\x07\xaa\x16\xc0\xc8\x12\x65\x4d\x0a\x94\xbe\xf9\xeb\x22\x75\x82\x56\x54\x2a\x40\xa6\xa8\xa2\xa8\x87\x30\x28\x3d\xfc\x1b\x21\x90\xa9\x81\xd9\x23\x26\x91\x39\x32\x0b\xf8\xad\x22\x2d\xaf\x01\xe4\x33\x20\xf7\x84\x56\xe6\xfb\xa0\x7f\xc6\x84\xc8\x47\x74\xaa\x38\x47\x05\x4a\xd0\xf9\x1c\x85\x3c\x06\x62\xe6\x93\xfe\x07\x2b\x41\x34\xd5\xd0\x62\x81\x73\x2a\x95\x58\x99\x1d\x9c\x44\xad\xb6\x37\xac\x53\x59\xbd\x1e\x31\xe3\x50\x98\xc5\x48\xef\xe8\x04\xec\x82\xf4\x7b\x43\x2a\x3a\xa3\x58\x1a\x8c\xa8\x1d\xc7\x20\xe5\x77\x71\x3f\x6c\x74\xeb\xfa\xb6\x41\x27\xdc\xfc\xef\xe9\xe9\x68\xbf\x5e\xcf\x17\xe2\x6c\xc8\xc5\xda\x10\xef\xf9\x0c\xd3\x1a\x8a\xd7\xdd\x4b\xe5\xf6\xcf\x4f\xd7\xe0\x0d\x4d\x49\x27\x7d\x64\x4d\xa9\x49\x71\x47\xe6\x09\x2b\x4a\x4f\xe8\x76\x08\x28\x2b\xf5\xc2\x66\xb7\x01\xa9\xfb\x85\x74\x2c\x3e\x8f\x20\xc4\xe2\x14\x72\xd9\xee\xb4\xf5\xce\x76\x63\xba\xd6\xfc\x39\x65\xec\xe4\xe3\x04\xd5\x21\xbb\x3b\x8c\x75\x13\xfa\xbf\xe7\x28\x95\x8b\xe6\x54\xed\xef\x94\x95\xc6\xc3\x16\x68\xa1\x66\x66\xf7\x89\x2a\x11\xe7\x73\x8a\x7b\x7c\x3c\xe5\x77\x4f\x4f\x96\x0d\x4b\xb8\x6d\x61\xfa\x15\xc5\x3b\x49\x52\x38\x9d\x22\x2d\x83\x5e\x1f\xf1\x21\x32\xd0\x9c\xa4\x1e\xaf\xc8\x7c\xcc\x36\x5b\x9c\x2f\xc9\x6c\xad\x6e\x23\xcc\xe6\xe2\x74\x8a\x6c\xea\xd2\xd8\xc2\x04\xbc\xd2\x44\x61\x61\xe3\x05\x18\x82\x26\x6c\xf9\x32\x0d\xe8\xe3\x0a\x9a\xcf\x32\x8d\x31\x5f\x88\xd3\xeb\x1a\x84\xed\xb5\x4e\x11\x34\x90\x26\xcc\xb4\x8e\x93\x25\x68\x9a\x39\x57\x23\xcc\xe2\xe3\xf2\x84\xd3\x15\x2a\x8c\x58\x65\x8b\x28\x68\x98\x96\x36\xd3\x36\x3e\xae\xa0\x79\x2c\xd3\x98\x91\x13\xe2\x0c\x6c\xe8\x55\x15\xdb\x70\x77\xe9\x9c\x70\x57\xbc\x75\xcd\x06\xef\xa6\x44\x65\x12\x57\xa7\x60\x12\x4d\x0f\xf2\x6e\x88\x5d\x25\x2a\x38\x39\xe9\x69\x8f\x80\x0b\x40\x26\x1b\x81\xc6\x6f\xd2\x1f\x86\xdd\x86\x4a\xa8\x05\x16\x58\xea\xf5\x78\x05\x04\xbe\xbe\xfc\xe1\xeb\x4b\x8f\xbe\x7f\x82\x22\xf9\x4e\x67\x67\x4b\x8f\x3f\xb8\xb7\xbf\x99\x85\xef\x54\x5f\xe0\x4c\xa0\xec\xbd\xac\x6e\x1f\xf4\x8d\x12\x2f\x79\x70\x66\x75\x5c\x5e\x2d\x73\x27\xdd\x08\x40\xdf\x7c\xb4\x0c\x1d\x22\x96\x20\x9b\xa2\x40\x29\x67\x4d\x55\xad\x42\xd3\x31\xc6\x18\xf0\x1e\x7a\x77\x43\xbe\x09\xba\x0e\xeb\x74\x81\x5d\x35\x0e\xb7\x4b\x17\x58\x52\xe3\x70\xbb\x74\x4e\xb8\x9b\x45\xbf\xf2\x0e\x3d\x86\x44\xe9\x49\xd7\x06\x7a\x74\x59\x57\xa8\xe7\x1c\x96\x5d\x18\xaa\x88\xd0\xfb\x4d\x89\x75\xc5\x57\xfa\x93\x47\x89\x43\xa1\x1f\x64\xe4\x42\xd9\x98\x39\x3a\xa4\xf1\xe1\xdd\xcd\xcd\x27\x90\x8a\xa8\x46\x42\xc1\x4b\x1b\x81\xe9\x7f\x1c\x6c\x74\x67\x0a\x75\xe7\x90\x07\xaf\xdf\x64\xa3\x4c\xd4\x38\x7d\x7f\xf1\x0b\xfc\x7c\xf6\xe1\xcb\xc5\x54\x2b\xb1\x24\xbe\x3e\x48\xe5\x76\x8a\x9e\xfe\x74\xf9\xe1\x62\x0a\x05\x67\x7a\x5d\xd3\x0e\x9e\x13\xee\x9f\x93\xeb\xab\xb0\x16\x23\x80\xb6\x14\x62\x5c\xe1\x89\xe2\x27\x1d\x30\x17\x52\x03\x9f\x5f\xc3\xd5\xf5\x0d\xdc\x7c\x3e\xbb\x9a\x7c\x38\xbb\xb9\x80\x9b\x77\x17\x70\xb4\x42\x79\x04\x67\x57\xe7\x70\xc4\xf8\xd1\x29\xc0\xcd\xbb\xeb\xc9\x05\x9c\x7d\xbe\x80\x9f\x2e\xff\x7d\x71\x0e\x6f\x3f\x5c\xc2\xd9\xe7\x7f\x7c\xf9\x78\x71\x75\x63\xed\x30\xe9\x14\xb7\x0d\xef\x46\xed\x3d\x95\xf4\x96\x56\x54\xad\x60\x3a\x79\x7b\xfd\xe9\x62\xfa\x23\xac\x50\xc2\xdf\x40\x2e\x88\xc0\xf2\x18\x18\x87\xbf\x41\x2d\xe8\x3d\x51\x3e\x0f\x67\x24\x98\xb3\x47\x64\xb3\x5c\x12\x41\xbf\x0f\x13\xab\x44\x45\x68\xe5\xdb\x0d\xfc\xf4\x4e\x78\xca\x8a\xaa\x29\x11\xea\xe6\xb6\xa2\x45\xb5\x6a\x35\xdb\xc9\xe8\x09\x94\x4d\xe5\xeb\xec\x4c\x10\x77\x8a\xff\x9b\xc5\xd0\x74\x33\x2a\xa4\x82\xe9\xe4\xfd\xe5\xa7\x29\xb0\x66\x79\x8b\x62\x73\x67\x15\x7c\x19\xd7\x6a\x1f\x44\xa7\x8a\x9c\x55\x2b\x10\xa8\x1a\xc1\x60\xfa\xe1\xf2\xe3\xe5\x4d\x18\xab\xe0\x55\x65\x33\xf0\x1e\x0d\xf7\x00\x74\x2a\xd8\x79\x56\xbe\x61\xd9\x7d\x8e\xa4\x81\xec\xc9\x4f\x4b\x4d\x13\xd2\x41\x3b\x0c\xee\x91\x8c\xc3\x01\x8a\x6f\xf0\xae\x93\x44\x5c\x3b\x4d\xab\x8d\xb2\x79\x26\x93\xe1\xbb\x45\x01\x82\xe1\x82\x6d\x33\x69\xd4\xc2\x02\x71\x73\x5a\xd0\xa8\x45\x42\xc0\x10\xe6\x4d\x68\x77\x7f\x20\x65\x54\xfe\xd1\x34\x63\xf3\x6f\xfe\xb3\xa9\x4c\x0b\x1d\x48\x54\x82\x2d\x7b\xd4\xc1\x26\x16\x32\xd1\x9e\x21\xfe\x44\xf1\xf7\x28\xa4\xde\xa0\x06\x84\xf6\x2f\x59\x4a\x84\x51\xdc\xe7\x5c\x8d\x5a\xe8\xd5\xb2\x30\x2e\x61\x23\x51\x40\xc9\xd1\x7a\x4c\x0b\x72\x8f\x6e\x9f\xe3\x47\x23\xa2\x3b\x39\x4f\xf4\xd7\x9f\x45\x94\x3b\x2e\x75\xfa\x49\x9d\x1f\xe8\xc8\xd2\x57\x58\xc6\xb3\xdb\xfb\xa2\x26\x0c\x85\xc1\x02\x43\x17\x26\xe6\x02\x12\x00\x46\xad\x6b\xaf\xe4\xeb\xbd\x97\xb6\x4d\x0c\x77\xf0\xc2\x12\x56\xe9\x2d\xa2\x48\x7b\x2c\xf5\x5e\x2b\x75\x02\x44\xea\x5a\x6d\xa0\xd2\x97\x67\x4b\x9e\x35\x64\xd2\x25\x6c\xf3\xe4\xac\x91\xe9\x52\xb6\x58\x32\x57\xc2\x3c\x39\x9b\x5c\x4e\x51\x76\x07\x29\x71\x46\x9a\xaa\xdb\x40\xf8\x4c\x77\x64\xfb\x37\x0d\x48\xab\x0a\x6e\x51\x2f\x4e\xa5\xbf\x84\x6a\x0c\x92\x5f\xa5\x2e\x42\xdd\x02\x54\x0b\xa2\xa0\x20\x2c\x51\x9d\x0c\x14\x7f\x4e\x39\x3c\xfb\xe6\xd1\xb9\x37\x8c\xdf\x60\x69\x8f\x21\x88\x14\x09\xe9\x81\x13\xad\x0f\x32\x44\x11\xa0\x76\x64\x44\xb1\x3a\xba\x00\x5c\xec\x6c\x7d\x9b\x2a\x00\xa5\xc3\xc2\x14\xcd\xd6\xe9\x3c\xcb\xdd\x1d\xe3\x0f\x3e\x90\xee\x6b\xc4\x46\xb7\x0d\xad\xca\xa8\x85\x2c\x55\x0a\x54\x1b\x4b\xa4\x21\x76\xc4\x69\x09\xd5\x81\x8d\x32\x1b\xbe\xe7\x95\x2b\x25\xc2\x24\x94\xd8\xdd\xa1\x6f\xa2\xec\xd2\x25\x19\x2d\x75\xa4\x6e\x52\xbb\x35\xad\xaa\x78\x18\xb5\x45\x14\xd0\x71\x7a\x75\xf6\xf1\x62\xf2\xe9\xec\xed\x45\xb8\x66\x6f\x9d\x2e\xd2\x9d\x15\x37\xd5\x77\x83\x7c\x98\xd1\xca\x7a\x56\xfa\x1f\xf9\x09\xf1\x6c\xc0\x88\x82\x02\x49\xb9\xbe\xf3\x1f\x40\xc5\x11\x90\xc1\x23\x7f\xb3\xb9\x92\xb2\x14\x28\xa5\xc1\x68\x03\xa1\xe4\x53\xfe\x04\x00\xa7\x02\xff\xda\x0a\xbb\x6d\x2b\x1e\x04\x6d\xcf\xbe\x1a\x11\x77\xb2\xf2\x30\x22\x89\x03\x53\xba\x14\xcd\x16\x58\x2a\x77\x12\xc8\x76\x92\xa6\xf0\x25\x75\xd6\x28\x22\x43\x67\x8d\x74\xe4\xe9\x4e\x1c\x21\xe8\x4d\x59\x76\x5b\xd1\x95\x11\x42\x78\xd9\xdc\xe7\x03\x54\xc6\x6c\xb6\x41\x12\x31\xda\x3a\xed\x48\xab\x25\x40\x84\x0f\x62\x2d\x7f\xb6\xdd\xfc\x7c\x5e\x57\xcb\x50\xda\xd4\x7c\xc0\xdb\x5a\xa7\x8a\x2e\x57\x4a\x50\xbc\xdf\xcb\x7e\x29\x18\x41\x03\x6e\xb6\x5f\x3b\xa4\x8f\x8f\xa7\x56\xff\x04\x33\xc6\xb8\x43\x15\x38\x0c\x1f\x42\x03\x71\x9b\x2a\x62\xcc\x96\x7c\x0f\x53\xc6\x11\x92\x6a\x71\x32\x07\xa2\x97\x2d\x54\x85\xd3\x57\xd4\x04\xec\xe7\x24\x8d\x85\xdf\x96\x67\x0f\x23\xc6\x11\x92\x2a\x72\x32\x8d\xe8\x65\x0b\x4e\xe6\xc8\x2c\xfe\x7f\x31\x7d\xe7\x5c\xe5\x1a\xcb\xc9\x12\xaa\xd0\x09\xed\x16\x6b\x14\xb1\xcd\x62\x20\x1d\xbb\x57\x44\x11\x92\x6a\x76\x72\x77\x0a\x1f\x5b\xb8\x5a\x27\xe4\xde\x6c\x11\xe5\xe5\x43\x77\xd2\xe5\xde\x16\x64\x41\xe4\xd7\xc6\xd8\xda\xf3\x67\x2a\x8c\x49\x07\xff\x53\x4f\x82\xcd\xa0\x38\xc8\x31\xf0\x18\x24\x5f\xc4\xcb\x75\x6c\x5c\x90\xaa\x5a\x6d\x78\xa5\x64\xa6\x50\xb4\xa5\xa6\x6c\x0e\xd4\x5b\x14\x90\x81\x90\xa0\xc2\x86\x8b\x77\x8b\x33\x2e\xda\xa2\xbb\x0c\x25\x62\x18\x91\xd3\x70\xc3\x96\x7a\x14\xbe\x41\x1c\x09\x62\xf4\x90\x95\xe5\x5d\x34\x8c\xe9\xe8\x3c\xc7\xea\x52\xe9\xd5\x60\x72\xfe\x1e\x88\x50\x74\x46\x0a\xe5\x53\xd3\x4d\x9b\x0e\x7b\x0c\x0f\x26\xf1\x68\x83\xc9\xb7\xd7\x1f\x3f\x5d\x5f\xe9\xc1\xdd\x56\x59\x10\x6d\x57\x5e\xdc\xa1\x38\x06\xca\xdb\x4b\x26\xb7\x44\x2e\x74\x77\xe4\xa8\x94\x23\xe7\x7a\xb2\x25\xc7\x5b\x8c\xa4\x45\x14\x7c\x59\x73\x86\x4c\x6d\x94\xfb\x2d\xa9\x94\x94\xcd\x4f\xe1\x9a\xe1\x1a\xc9\xab\x8d\xc6\x70\xd1\xcb\x78\xdd\xdf\xe4\x92\x35\x16\xe6\x8a\x4a\xa0\x4c\xe9\x79\xe5\x46\x96\xde\x39\x32\x14\xda\xa9\x1a\xb7\xb8\x46\xd8\xdd\x97\x32\x88\x5c\xfc\xaa\x5b\xa3\x67\x18\x67\xbf\x2e\xa5\xef\x76\xa6\xb6\x8e\xa6\x06\xdd\xb8\x93\x81\x05\x64\x21\x68\xad\xe0\x55\x2f\xf4\xb5\xdd\x79\xcc\x58\x19\xca\xb9\xba\xcb\x5f\x25\x15\x58\x28\x2e\x56\xa7\x5f\xd9\x4d\x1f\x4c\x6f\xdc\xf3\x5d\x03\xe7\x33\x78\x90\x77\xdd\x67\x79\x0c\x92\x37\xa2\xb0\xd5\x1b\x5a\x11\xd8\x55\x84\x32\xc5\x61\xc5\x1b\xdb\x15\x80\xec\x9e\x0a\xce\x74\x37\xfa\x36\xbf\x40\xc7\x1f\x99\xa2\xac\xf6\xcf\x9b\x9b\xea\x29\xfc\x6c\x86\x7c\xff\x79\x67\x52\xa5\xcc\xa9\x3f\x46\xb6\xb7\xd9\x26\xaf\x33\x84\x75\xa4\x12\x48\xca\x95\x8d\x25\xe4\x29\xc0\xb9\xf5\xc4\xa8\xb2\x97\xd0\x50\x89\x95\xef\x12\xf7\x68\x38\xaf\x72\x9b\xed\x37\x66\x6a\x87\x55\xd6\xd5\x8b\x51\x50\x5e\xa5\xac\x8d\x41\xde\xe9\xa6\x70\x66\x0f\x76\x1e\xd6\xc6\x3b\x51\x9e\xf1\x1e\x50\x6f\x0f\x50\xa7\xa2\xe7\xfc\x81\x55\x9c\x94\x58\xc2\x70\xb7\x9e\x5e\x4f\x40\x2a\x22\xcc\x6d\xa6\xba\x3e\x85\x2f\xec\x3b\xad\xd7\xbb\x8b\x95\xc0\x6b\x64\x5d\x1a\xf4\x37\x2c\xcc\xd9\xf9\xbf\x0b\x5e\x06\x1e\x2d\x78\x26\x61\xa9\x41\x99\x9e\x26\x8d\xa8\x6a\xa2\x16\x7a\x92\x4c\xce\xdf\x8f\x09\xcb\x82\x28\x4e\x55\x26\xf6\x42\xf5\xac\xbf\xb4\x2b\x91\xd9\x0c\xf2\xce\xc4\x4d\xd1\x69\x34\x9c\xfb\x5e\xa2\x10\x7c\xcd\x7f\xd3\xe3\x7d\x73\x6e\x46\xf5\xc9\x41\x08\xa9\xc0\xeb\x95\xe6\x6f\xaf\x9f\x0b\x94\x35\x67\x12\xed\x2a\xad\x01\x53\x15\xc9\xc0\xf1\xcf\xdd\x6e\xda\x1c\x70\xc9\x1b\x8f\x19\xb0\x5a\xc3\xfe\xf1\x9d\xd6\xb5\x6e\xf0\xa8\x6e\x4b\xe1\x0f\x8a\x57\x44\x88\x3d\xa4\x47\xd9\x63\xde\x76\x7b\x09\x3a\xee\x6e\x77\x84\x4e\xc0\x19\x15\xd8\x91\x00\xde\xfb\x2b\xd4\x1d\x84\x91\xe5\x67\x83\x63\x9c\xbf\x96\x00\x11\x4c\x73\xb4\xac\x58\xc2\x0f\x9b\x37\x86\x7f\x18\x46\xa2\x31\x12\x2d\x35\x22\x2d\x13\x72\x20\xe3\x30\x63\xc9\xdf\x16\x35\x9e\xff\xed\x08\xff\xd4\x50\xbf\x3b\x80\x3b\x39\x69\x0b\x96\x7b\x8f\x6c\xad\xb0\x51\xcc\xef\x49\x65\x2a\xe0\x2c\xf1\x5a\xb8\x63\x35\xe0\xc2\x28\x10\x39\xe4\x3b\x8c\x8c\xb4\x8c\xf9\x7e\xa3\x35\x09\x24\x29\x6f\xde\x41\xe4\xa7\xce\x5d\x9c\x49\xd9\xf3\xf0\x00\xf4\x51\xa7\xe5\xd0\xf7\x33\x6b\x12\x48\x52\x26\x3d\xdf\xac\x21\x4e\x6f\x3e\x3d\x6c\xca\x75\x8a\x68\xb4\xab\xf6\xb4\x5d\x1c\x21\x9a\x51\xcf\x37\x9a\x8f\x2b\x94\x57\x0f\xdb\x6c\x8b\x28\x2d\xbb\xbe\x9f\xe5\x92\x40\x92\x72\xec\xf9\x06\x0c\x71\x86\x33\xed\x11\xaf\x60\x97\x2e\x3f\xd5\xdd\xb1\x3e\x57\xb6\x3b\x0b\x3f\xa2\x3e\x65\xf7\xfc\x6e\xb3\x13\xf5\xbf\xfb\x9b\x67\xa8\xb7\x15\x73\x2f\xc4\xd6\xb0\x20\x96\x7d\xd9\xb6\xf9\xd8\x56\x47\x0f\x4f\x5a\x65\xbd\x2c\xf5\x8c\xc2\xff\xd4\xed\xbf\x6b\xd2\x41\x92\xfd\x23\xc1\x9c\x3d\xdf\x61\x19\xf3\x4d\xcf\xde\xde\x5c\x5e\x5f\xfd\x7a\x75\xf6\xd1\x5b\xf7\x15\x60\x88\xa4\xd1\x3b\xce\xd4\x4c\xfa\x36\xbd\xfb\x1e\x52\xff\x96\xca\x88\xfb\x8b\x89\xcc\x89\xd7\x17\x5d\x68\x63\x6e\x2f\xc6\x70\xdc\xb7\x3a\x76\xde\x18\x33\xe9\x4d\x90\xa8\xe1\x94\x1e\x0c\x3a\x4a\xec\x3e\xfe\xde\x70\x73\x2b\x76\xa6\x17\x92\x55\x27\x1d\xec\xbd\x05\x5f\x64\x7a\x58\x19\xc1\x42\xb7\xf4\xf7\xcd\x42\x1c\xde\x98\xbd\x77\x8c\xa7\xd6\x25\x7e\x7a\x9a\xe6\x5c\x5b\xca\x82\x18\xa9\x84\xe9\xf2\x03\x68\xb2\x8d\xe3\xb9\xcd\x17\xbc\x63\x1a\xbc\x34\x6a\x96\x1a\xdf\x64\xb6\x1f\xc3\x99\xe2\xf5\xe3\xe5\xfe\x7a\x90\xf1\x9b\xa3\x59\xe1\x10\x6b\x4a\x0a\xcb\xa6\x34\x76\xb0\x72\xf3\x58\x71\x98\x80\x32\xbc\x46\x33\xed\xf7\xd1\x24\x15\x23\x7a\x7f\x66\x94\x0e\x19\x00\x31\xe7\xa9\x46\x26\x37\xaf\xba\x9b\xd4\x4f\x9b\x77\xca\x71\x93\x92\x91\xd2\xe2\xdc\x21\x23\xa7\x31\x4b\x2a\x34\xe4\xc3\x42\xb7\xb4\x07\xdd\x2f\x08\xde\x43\x42\x82\x55\x41\x23\x60\xb9\x59\x7d\x7c\xb8\x36\x1c\x40\x44\x5a\x3f\x3c\x93\xfe\xfb\xa1\x27\xcc\x6e\x45\xc4\xbe\x93\x3b\x02\x11\x50\x42\x20\x29\xf7\x54\x22\x11\xe2\x00\x93\xa9\x4b\xf3\x3e\xdf\x64\x0a\x4b\xd8\x73\x1c\x1e\x44\xfd\x91\xe8\xd1\xe5\x7d\xd4\x00\xc8\x00\x48\x52\x60\x63\xd3\xde\x79\xc2\xa4\x97\xa0\x56\x35\x7a\xe3\xfe\xfd\x30\x23\x07\x05\xed\x1b\xa9\xd1\x73\x82\x8e\x2e\x94\xa9\xb6\xaf\xff\x91\xd0\xd3\x0c\x2e\xca\x88\x21\xdb\xa7\x7c\x6d\x28\xdc\x95\x39\xa4\xfb\xcc\x23\x80\xd2\x66\x05\xc9\x7d\x4b\xda\xc7\x97\x94\xf3\x6d\xd5\xce\x4f\xf9\x3a\x18\x43\x19\xdf\xf5\x47\x08\x83\x3d\xe9\xa7\x4f\xcb\xfa\x66\x9b\xcf\xc7\x97\x94\xdb\xcd\x36\x5f\x80\xd1\x53\x42\x66\xd2\x39\x41\x93\x6d\xd2\xa4\x25\xa7\xd6\x52\x40\xf9\x6b\x58\x0a\x46\xd0\x7c\x16\xe0\x90\xe7\x63\x63\x10\xbd\xa9\xf4\xa0\xb5\xd7\x08\x12\x12\xe9\xd9\xc3\xd1\xc9\xe4\xae\xf1\x0c\x69\x19\xd2\x70\x3d\x63\x9e\x3d\x80\x3d\x4c\xa1\x2c\x7b\x50\xd1\x4d\x9a\xb4\x1c\x7b\xb6\x51\x7d\x7c\x49\x99\xf4\x6c\x13\x05\x18\xc3\x79\xf4\xf0\xa6\xb9\x43\x96\x9f\x45\x6f\x39\x9f\x2b\x89\x9e\x03\xef\x54\xfe\x2d\x6f\xaa\xd2\x24\x20\x66\x94\x95\x70\xb4\x24\x94\x1d\xc1\x12\xd5\x82\x9b\x7a\xc5\x35\x28\x8f\x7e\x39\x08\x69\xf6\xdb\x5d\xe5\xcc\xa6\xcb\xeb\x55\xbe\xb1\x92\xb0\x9c\x6a\xfd\xb4\x9d\xaa\xd9\x7a\xe6\xdd\xb8\x66\x5c\x00\x55\x5b\x49\x9c\xa8\x92\x87\x40\x4e\xb9\x15\x3c\xf6\x7a\x8e\x97\xd5\x29\xd4\xd9\x10\xd9\xd4\x35\x17\x6b\x53\x52\x34\x4c\xd1\xa5\x2f\x57\x97\x87\xe1\xf7\x5c\xed\x33\x7a\x1d\xbd\x79\x16\x8c\xc0\xe9\x77\x5a\xf7\x45\xda\x20\xf0\xf7\x86\x0a\x94\x6d\x2d\xb2\xa9\xa4\x32\x25\xb4\x96\xe7\x4e\x8f\x61\xfc\x56\x57\xb4\xa0\xca\xfb\x5b\x48\xcf\x24\xcc\x73\xd6\x81\x44\x81\x3d\xb2\x00\x22\xbb\x02\x49\xba\x24\x73\x84\x9a\xa8\x05\x70\xd6\xfe\x71\xd1\xdc\x7a\xcf\x3f\xb2\x40\x92\x14\xe9\x9f\xa0\xd5\xeb\x50\xaa\xb3\x99\x09\x92\xa4\xc8\x56\x3e\x1f\x24\xfe\xde\x20\x2b\x70\x7d\x81\xec\x7d\xa8\x44\xbd\xf2\x30\xdd\x6a\x2e\x10\xa6\xef\x2f\xaf\xce\xa7\xe6\xb8\x73\xe8\xf6\x76\x1c\xc3\x2b\xfc\x46\x96\x75\x85\x6f\x40\x3e\xd0\x99\x7a\xf3\x1f\xc7\xc0\x78\x89\xbf\xc9\x37\xff\xf9\xda\xa7\xe6\x5e\x98\x01\xa7\xe6\x30\x67\x7c\xe3\xb0\xbc\xd6\xd3\x2d\xe2\x8d\xea\x9f\xfe\xa3\x0c\x96\xb4\xaa\xa8\xc4\x82\xb3\x52\xb6\x57\x73\x1e\x16\xb4\x58\xac\xdb\x82\x4a\x50\x28\x96\x94\xe9\x9e\x0b\x18\xf2\x20\xf0\x5e\xe5\x97\xe4\x1b\x5d\x36\x4b\x58\xe2\x92\x8b\xd5\xba\x90\x8f\x7f\x37\xfb\xf5\x00\x19\xd0\x31\x07\x25\xaa\x4a\xc5\xe7\x20\xe9\x77\xdc\x57\x99\x34\x1c\xf7\x2d\x8b\x8a\x9b\x9f\xb1\x0a\xcf\xc6\x6d\x2a\xcf\x19\x0e\x7f\x00\xf3\x42\xa4\x16\x78\x6f\xab\xd7\xed\xf3\x94\x40\x67\x40\xa0\x47\x59\xfb\xfe\xaa\x61\x15\x4a\x39\x3c\x45\x44\xba\x57\x1c\x7c\x53\xee\xe0\x62\xdc\x0f\x3b\xc4\xdf\xe2\xec\x7d\xbd\x43\x3d\xee\xe9\x03\x74\x2a\x18\x7e\x8a\x73\x07\x6a\xcf\xa7\x3d\x43\x78\x91\x03\xfb\x76\x96\xa6\x9e\xd7\x6f\x91\x27\x24\xd9\x6c\x17\xa7\x25\xda\x3a\xda\x40\x14\x12\x45\xdc\x21\x1b\x75\x77\x76\xe4\x7d\xd9\x91\x21\x4f\xab\xea\x73\x86\x3d\x39\x22\x82\x79\x07\x0b\x14\xc9\x3d\xb4\x44\xe9\x01\x4c\xbf\x50\x14\x5c\x94\x46\xc9\xa3\x36\x0f\x32\xa2\xed\xe9\x80\xde\x2d\x7e\x73\xe1\xd2\xec\xfe\xc4\xcd\xab\xb5\x07\x2d\x80\x28\x8d\xae\xf7\xca\xa7\xa7\xd7\xde\x48\xfc\xa0\x22\x92\x72\x28\xad\xb4\xd4\x74\x95\x97\xcd\x5f\xde\xa9\x07\x1c\x9f\xcb\xd6\x35\x4d\x1a\x2a\x7e\x9e\xb4\x91\x63\x78\xcd\x4f\x99\x0d\xaa\xee\x31\x6e\x52\xe1\xd2\x94\xeb\x36\xbd\xe1\x25\xb2\x03\xaa\x3a\x0e\xdc\x5d\x17\xc2\xab\xca\x14\xee\x50\xd6\xf0\x46\x56\xf6\xc7\xe1\xb4\xd3\xb2\x44\x29\x87\x17\xa3\xdb\x2b\x64\x7a\x1f\x6a\x18\x1b\xa2\x0e\xdf\x42\xbc\x3f\xae\x53\xdd\x4f\x1a\x36\xea\xb0\x6e\x53\xb9\x0f\x4e\x99\xf6\x58\xdf\x2a\x51\x9d\x14\xe6\x7d\xa6\x6f\xd4\x5b\x8e\xe2\xa6\xf5\x6a\x68\xee\xb0\x6c\x76\x88\x1e\x5d\xde\x79\x17\xe6\x71\x8a\xf9\xca\xce\x7a\xc2\x37\xb0\xb9\x56\xe8\x8e\xf7\xaf\x3e\x29\x9c\xfb\xb8\x5d\xfd\x5e\x73\x48\xd7\xcb\x07\x3a\xd2\xfd\xda\x81\x3b\x80\x0b\x16\xc2\xf4\x1c\x9e\xd8\xa6\xcf\x9a\x36\x6b\xda\x76\x7b\x89\xf6\x4a\x72\xe8\x48\x25\xce\xe9\x14\xd9\x36\x60\x5d\x5d\x7b\x1f\x8a\x2e\x51\x2a\xb2\xac\x25\x20\x11\x15\x45\x1d\x9c\x10\x06\xd3\x2f\x9f\x6e\xae\xa7\x3f\xc2\x12\x89\x34\x3f\x5e\xbb\x1d\xf6\x49\xaa\xe3\xfc\x9b\xc5\x31\xfc\xe5\xaf\xc7\xf0\x4f\xc2\xe0\xaf\xff\xfd\x5f\x7f\xf1\x3d\x61\xf1\x07\x49\x1f\xdb\xf4\x8a\xa8\x5e\xf4\xe4\xf2\xea\xed\xc5\x1f\xd9\xf2\x43\x08\x4f\xf0\xf6\xfb\x91\x92\xee\xf1\x6f\xb1\xb8\x85\x28\x5e\x43\xdd\x2e\x63\x36\x17\x30\x9d\x5c\xbc\xbd\xbe\x3a\x9f\x4c\xa1\xd5\xda\x27\x2c\x85\xd5\x23\x94\x08\xd5\xb3\x6e\x2e\x9e\x72\x17\x04\xc8\xdc\x77\x9d\x7e\x0c\xd2\x18\x95\x3e\x5e\x5e\x7d\xb9\xb9\x98\x4c\x61\x49\x59\xa3\x70\x0f\x95\x9c\x48\x63\x54\x7a\x77\xfd\xe5\xf3\x64\x0a\x0b\xde\x88\x3d\xd4\xd9\x41\x19\xa3\xca\xf9\xd9\x2f\x93\x29\x94\x64\xb5\x87\x22\x5b\x18\x91\x4a\xea\x2e\x32\x30\x35\xb5\x47\x9b\x3f\xde\xfc\xc3\xf0\xe3\xcd\xd1\x6a\xe9\x54\x1c\x6f\x99\xec\xee\x0f\x86\xda\x0b\x7b\x39\xf5\xca\xe9\x18\xfe\x82\x65\xd7\x4f\x5a\xe7\xea\x91\x01\xe2\xee\x9e\xfe\x9c\xc0\x24\xbb\x4d\xbd\x4a\xd1\xc2\x61\x77\x4c\x50\x7a\x4b\xd8\x13\xb9\x53\x44\x53\x99\x2b\x6e\x83\x23\x57\x04\x0c\xdf\xa8\x04\x6e\xf6\x71\x52\x8d\x90\xec\x03\x0a\x29\xd4\xae\xf2\x97\xe7\x19\xad\xf6\xf0\xb8\xc5\xf4\x3f\x21\xd4\xf7\x4b\xf7\x93\xac\xf6\x0f\x29\x7d\x9b\x85\x91\xa2\x46\x4a\x5b\x03\x1c\x1e\x11\xe6\x85\xa8\x74\x7c\x0f\x79\x00\xfc\xb8\xbf\x3a\xb3\x36\xbe\x33\xcc\x98\x83\xe1\x51\xa3\x63\x4e\x6f\xa6\x9f\x23\x57\x04\xe8\x3e\x59\x55\x9c\x94\x49\x13\x25\x1f\xc8\x37\x51\x3a\x8a\xb5\x24\x1a\xb5\xe7\x72\x26\x3e\xd8\xbc\xa7\x12\x98\x3c\x99\x38\x49\x17\x69\x5e\xc9\xd7\xa7\x7a\x65\xed\x1a\x97\x7c\x9f\xc6\xc1\x98\x2a\xd0\x2c\xe5\x44\xcc\xe5\xd3\xd3\x68\xd9\x01\x0c\x4f\x18\x4a\x0a\xff\x69\x73\xf7\xd5\x9d\xdb\x53\x50\x21\xf1\xfe\x08\x41\xff\xd9\xc9\xcc\x38\x2c\xb9\xf9\x35\x51\xe2\x8b\xcb\x36\x48\xdc\x99\x67\xbe\xb5\x27\xc6\xa6\x4d\x80\xc1\xe7\x62\xf9\xdf\x1f\x0e\x3d\x3b\x3c\xfc\x5e\x7a\xec\x2a\x9d\x07\xa0\xfd\x91\x0a\x6f\x21\x95\xfd\xea\xdd\x82\xba\x2b\x4e\x9d\xef\x54\x0b\x7e\x4f\x4b\x2c\xb7\x7c\xab\xc0\x86\x94\x8a\xa0\x55\x78\xf1\xbf\x2f\xfe\x2f\x00\x00\xff\xff\xdc\x3d\x2c\x40\xeb\x89\x00\x00")

func wski18nResourcesEn_usAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEn_usAllJson,
		"wski18n/resources/en_US.all.json",
	)
}

func wski18nResourcesEn_usAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEn_usAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/en_US.all.json", size: 35307, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesEs_esAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesEs_esAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesEs_esAllJson,
		"wski18n/resources/es_ES.all.json",
	)
}

func wski18nResourcesEs_esAllJson() (*asset, error) {
	bytes, err := wski18nResourcesEs_esAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/es_ES.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesFr_frAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8a\xe6\x52\x50\xa8\xe6\x52\x50\x50\x50\x50\xca\x4c\x51\xb2\x52\x50\x4a\xaa\x2c\x48\x2c\x2e\x56\x48\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x55\x48\xce\x48\x4d\xce\xce\xcc\x4b\x57\xd2\x81\x28\x2c\x29\x4a\xcc\x2b\xce\x49\x2c\xc9\xcc\xcf\x03\xe9\x08\xce\xcf\x4d\x55\x40\x12\x53\xc8\xcc\x53\x70\x2b\x4a\xcd\x4b\xce\x50\xe2\x52\x50\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x45\xa4\xe9\x62\x65\x00\x00\x00")

func wski18nResourcesFr_frAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesFr_frAllJson,
		"wski18n/resources/fr_FR.all.json",
	)
}

func wski18nResourcesFr_frAllJson() (*asset, error) {
	bytes, err := wski18nResourcesFr_frAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/fr_FR.all.json", size: 101, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesIt_itAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesIt_itAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesIt_itAllJson,
		"wski18n/resources/it_IT.all.json",
	)
}

func wski18nResourcesIt_itAllJson() (*asset, error) {
	bytes, err := wski18nResourcesIt_itAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/it_IT.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesJa_jaAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesJa_jaAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesJa_jaAllJson,
		"wski18n/resources/ja_JA.all.json",
	)
}

func wski18nResourcesJa_jaAllJson() (*asset, error) {
	bytes, err := wski18nResourcesJa_jaAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ja_JA.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesKo_krAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesKo_krAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesKo_krAllJson,
		"wski18n/resources/ko_KR.all.json",
	)
}

func wski18nResourcesKo_krAllJson() (*asset, error) {
	bytes, err := wski18nResourcesKo_krAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/ko_KR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesPt_brAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesPt_brAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesPt_brAllJson,
		"wski18n/resources/pt_BR.all.json",
	)
}

func wski18nResourcesPt_brAllJson() (*asset, error) {
	bytes, err := wski18nResourcesPt_brAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/pt_BR.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hansAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hansAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hansAllJson,
		"wski18n/resources/zh_Hans.all.json",
	)
}

func wski18nResourcesZh_hansAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hansAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hans.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wski18nResourcesZh_hantAllJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func wski18nResourcesZh_hantAllJsonBytes() ([]byte, error) {
	return bindataRead(
		_wski18nResourcesZh_hantAllJson,
		"wski18n/resources/zh_Hant.all.json",
	)
}

func wski18nResourcesZh_hantAllJson() (*asset, error) {
	bytes, err := wski18nResourcesZh_hantAllJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wski18n/resources/zh_Hant.all.json", size: 0, mode: os.FileMode(420), modTime: time.Unix(1478145248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wski18n/resources/de_DE.all.json":   wski18nResourcesDe_deAllJson,
	"wski18n/resources/en_US.all.json":   wski18nResourcesEn_usAllJson,
	"wski18n/resources/es_ES.all.json":   wski18nResourcesEs_esAllJson,
	"wski18n/resources/fr_FR.all.json":   wski18nResourcesFr_frAllJson,
	"wski18n/resources/it_IT.all.json":   wski18nResourcesIt_itAllJson,
	"wski18n/resources/ja_JA.all.json":   wski18nResourcesJa_jaAllJson,
	"wski18n/resources/ko_KR.all.json":   wski18nResourcesKo_krAllJson,
	"wski18n/resources/pt_BR.all.json":   wski18nResourcesPt_brAllJson,
	"wski18n/resources/zh_Hans.all.json": wski18nResourcesZh_hansAllJson,
	"wski18n/resources/zh_Hant.all.json": wski18nResourcesZh_hantAllJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"wski18n": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"de_DE.all.json":   &bintree{wski18nResourcesDe_deAllJson, map[string]*bintree{}},
			"en_US.all.json":   &bintree{wski18nResourcesEn_usAllJson, map[string]*bintree{}},
			"es_ES.all.json":   &bintree{wski18nResourcesEs_esAllJson, map[string]*bintree{}},
			"fr_FR.all.json":   &bintree{wski18nResourcesFr_frAllJson, map[string]*bintree{}},
			"it_IT.all.json":   &bintree{wski18nResourcesIt_itAllJson, map[string]*bintree{}},
			"ja_JA.all.json":   &bintree{wski18nResourcesJa_jaAllJson, map[string]*bintree{}},
			"ko_KR.all.json":   &bintree{wski18nResourcesKo_krAllJson, map[string]*bintree{}},
			"pt_BR.all.json":   &bintree{wski18nResourcesPt_brAllJson, map[string]*bintree{}},
			"zh_Hans.all.json": &bintree{wski18nResourcesZh_hansAllJson, map[string]*bintree{}},
			"zh_Hant.all.json": &bintree{wski18nResourcesZh_hantAllJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
